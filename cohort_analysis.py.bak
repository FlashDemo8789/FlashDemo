import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import Dict, List, Optional, Any

@dataclass
class CohortMetrics:
    retention: pd.DataFrame
    revenue: pd.DataFrame
    ltv: pd.DataFrame
    growth: pd.DataFrame
    summary: Dict[str,Any]

class CohortAnalyzer:
    """
    HPC synergy BFS–free => analyze cohorts
    Merged with minimal “NEW(UI)”.
    """

    def __init__(self):
        pass

    def analyze_cohorts(self,
                        user_data: Optional[pd.DataFrame]=None,
                        transaction_data: Optional[pd.DataFrame]=None,
                        cohort_periods: int=12)-> CohortMetrics:
        if not isinstance(user_data, pd.DataFrame) or not isinstance(transaction_data, pd.DataFrame):
            return self._generate_dummy_cohort_data(cohort_periods)

        required_user_cols= ['user_id','acquisition_date']
        required_tx_cols= ['user_id','date','revenue']
        if not all(rc in user_data.columns for rc in required_user_cols) or\
           not all(tc in transaction_data.columns for tc in required_tx_cols):
            return self._generate_dummy_cohort_data(cohort_periods)

        user_data['cohort']= user_data['acquisition_date'].dt.to_period('M')
        transaction_data['date_period']= transaction_data['date'].dt.to_period('M')
        merged= pd.merge(transaction_data, user_data[['user_id','cohort']], on='user_id', how='left')
        merged['periods_since_acquisition']= (merged['date_period']- merged['cohort']).apply(lambda x: x.n)
        merged= merged[ merged['periods_since_acquisition'].between(0, cohort_periods-1)]
        cohorts= sorted(user_data['cohort'].unique())

        retention_matrix= self._calculate_retention_matrix(user_data, merged, cohorts, cohort_periods)
        revenue_matrix= self._calculate_revenue_matrix(merged, cohorts, cohort_periods)
        ltv_matrix= revenue_matrix.cumsum(axis=1)
        growth_matrix= self._calculate_growth_matrix(user_data, cohorts)
        summary= self._calculate_summary_metrics(retention_matrix, revenue_matrix, ltv_matrix, growth_matrix)

        return CohortMetrics(
            retention= retention_matrix,
            revenue= revenue_matrix,
            ltv= ltv_matrix,
            growth= growth_matrix,
            summary= summary
        )

    def _calculate_retention_matrix(self, user_data, tx_data, cohorts, cperiod)-> pd.DataFrame:
        cohort_sizes= user_data.groupby('cohort').size()
        active_by_cp= tx_data.drop_duplicates(['user_id','cohort','periods_since_acquisition']) \
                            .groupby(['cohort','periods_since_acquisition']).size().unstack(1).fillna(0)
        ret_matrix= active_by_cp.divide(cohort_sizes, axis=0)*100
        return ret_matrix

    def _calculate_revenue_matrix(self, tx_data, cohorts, cperiod)-> pd.DataFrame:
        rev_cohort= tx_data.groupby(['cohort','periods_since_acquisition'])['revenue'].sum().unstack(1).fillna(0)
        cohort_sizes= tx_data.drop_duplicates(['user_id','cohort']).groupby('cohort').size()
        arpu_matrix= rev_cohort.divide(cohort_sizes, axis=0)
        return arpu_matrix

    def _calculate_growth_matrix(self, user_data: pd.DataFrame, cohorts: List[pd.Period])-> pd.DataFrame:
        monthly_acquisitions= user_data.groupby('cohort').size()
        growth= monthly_acquisitions.pct_change()*100
        df= pd.DataFrame({
            'cohort_size': monthly_acquisitions,
            'growth_pct': growth
        })
        return df

    def _calculate_summary_metrics(self, retention, revenue, ltv, growth)-> Dict[str,Any]:
        summary= {}
        summary['avg_retention_by_period']= retention.mean()
        summary['latest_cohort_retention']= retention.iloc[-1] if not retention.empty else pd.Series()
        summary['avg_ltv_by_period']= ltv.mean()
        if not ltv.empty and ltv.shape[1]>3:
            summary['ltv_3month_trend']= ltv[3].pct_change().mean()*100
        else:
            summary['ltv_3month_trend']= 0
        if 'growth_pct' in growth:
            summary['avg_cohort_growth']= growth['growth_pct'].mean()
        else:
            summary['avg_cohort_growth']= 0

        if not retention.empty and retention.shape[0]>1 and 1 in retention.columns:
            summary['retention_improvement']= retention.iloc[-1][1] - retention[1].mean()
        else:
            summary['retention_improvement']= 0
        return summary

    def _generate_dummy_cohort_data(self, cperiod: int)-> CohortMetrics:
        from datetime import datetime, timedelta
        date_range= pd.date_range(datetime.now()- timedelta(days=30*cperiod), periods=cperiod, freq='ME')
        cohorts= [pd.Period(d, freq='M') for d in date_range]

        ret_data={}
        for i in range(cperiod):
            ret_data[i]= [100*(0.8**i) for _ in range(len(cohorts))]
        ret_mat= pd.DataFrame(ret_data, index=cohorts)

        rev_data={}
        for i in range(cperiod):
            rev_data[i]= [10*(1.1**i) for _ in range(len(cohorts))]
        rev_mat= pd.DataFrame(rev_data, index=cohorts)
        ltv_mat= rev_mat.cumsum(axis=1)
        growth_data= {
            'cohort_size': [100*(1.05** i) for i in range(len(cohorts))],
            'growth_pct': [5 for _ in range(len(cohorts))]
        }
        growth_mat= pd.DataFrame(growth_data, index= cohorts)
        summary= {
            'avg_retention_by_period': ret_mat.mean(),
            'latest_cohort_retention': ret_mat.iloc[-1] if not ret_mat.empty else pd.Series(),
            'avg_ltv_by_period': ltv_mat.mean(),
            'ltv_3month_trend': 0,
            'avg_cohort_growth': 5,
            'retention_improvement': 0
        }
        return CohortMetrics(retention= ret_mat, revenue= rev_mat, ltv= ltv_mat, growth= growth_mat, summary= summary)
